{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.getPopulateObj = getPopulateObj, exports.getChildType = getChildType, exports.getPopulateObjs = getPopulateObjs, exports.getPopulates = getPopulates, exports.getPopulateChild = getPopulateChild, exports.populateList = populateList, exports.promisesForPopulate = promisesForPopulate;\n\nvar _some2 = _interopRequireDefault(require(\"lodash/some\")),\n    _has2 = _interopRequireDefault(require(\"lodash/has\")),\n    _set2 = _interopRequireDefault(require(\"lodash/set\")),\n    _forEach2 = _interopRequireDefault(require(\"lodash/forEach\")),\n    _get2 = _interopRequireDefault(require(\"lodash/get\")),\n    _map2 = _interopRequireDefault(require(\"lodash/map\")),\n    _isObject2 = _interopRequireDefault(require(\"lodash/isObject\")),\n    _filter2 = _interopRequireDefault(require(\"lodash/filter\")),\n    _index = require(\"./index\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getPopulateObj(str) {\n  if (!(0, _index.isString)(str)) return str;\n  var strArray = str.split(\":\");\n  return {\n    child: strArray[0],\n    root: strArray[1]\n  };\n}\n\nfunction getChildType(child) {\n  return (0, _index.isString)(child) ? \"string\" : Array.isArray(child) ? \"array\" : (0, _isObject2.default)(child) ? \"object\" : \"other\";\n}\n\nfunction getPopulateObjs(arr) {\n  return Array.isArray(arr) ? arr.map(function (o) {\n    return (0, _isObject2.default)(o) ? o : getPopulateObj(o);\n  }) : arr;\n}\n\nfunction getPopulates(queryParams) {\n  var populates = (0, _filter2.default)(queryParams, function (param) {\n    return -1 !== param.indexOf(\"populate\") || (0, _isObject2.default)(param) && param.populates;\n  }).map(function (p) {\n    return p.split(\"=\")[1];\n  });\n  return populates.length ? populates.map(getPopulateObj) : null;\n}\n\nfunction getPopulateChild(firebase, populate, id) {\n  return firebase.database().ref().child(\"\".concat(populate.root, \"/\").concat(id)).once(\"value\").then(function (snap) {\n    return snap.val();\n  });\n}\n\nfunction populateList(firebase, list, p, results) {\n  return results[p.root] || (0, _set2.default)(results, p.root, {}), Promise.all((0, _map2.default)(list, function (id, childKey) {\n    var populateKey = !0 === id || p.populateByKey ? childKey : id;\n    return getPopulateChild(firebase, p, populateKey).then(function (pc) {\n      return pc ? (0, _set2.default)(results, \"\".concat(p.root, \".\").concat(populateKey), pc) : results;\n    });\n  }));\n}\n\nfunction promisesForPopulate(firebase, dataKey, originalData, populatesIn) {\n  var promisesArray = [],\n      results = {},\n      populatesForData = getPopulateObjs(\"function\" == typeof populatesIn ? populatesIn(dataKey, originalData) : populatesIn),\n      dataHasPopulateChilds = (0, _some2.default)(populatesForData, function (populate) {\n    return (0, _has2.default)(originalData, populate.child);\n  });\n  return dataHasPopulateChilds ? (0, _forEach2.default)(populatesForData, function (p) {\n    return (0, _index.isString)((0, _get2.default)(originalData, p.child)) ? promisesArray.push(getPopulateChild(firebase, p, (0, _get2.default)(originalData, p.child)).then(function (v) {\n      v && (0, _set2.default)(results, \"\".concat(p.root, \".\").concat((0, _get2.default)(originalData, p.child)), v);\n    })) : promisesArray.push(populateList(firebase, (0, _get2.default)(originalData, p.child), p, results));\n  }) : (0, _forEach2.default)(originalData, function (d, key) {\n    var populatesForDataItem = getPopulateObj(\"function\" == typeof populatesIn ? populatesIn(key, d) : populatesIn);\n    (0, _forEach2.default)(populatesForDataItem, function (p) {\n      var idOrList = (0, _get2.default)(d, p.child);\n      return idOrList ? (0, _index.isString)(idOrList) ? promisesArray.push(getPopulateChild(firebase, p, idOrList).then(function (v) {\n        return v && (0, _set2.default)(results, \"\".concat(p.root, \".\").concat(idOrList), v), results;\n      })) : Array.isArray(idOrList) || (0, _isObject2.default)(idOrList) ? promisesArray.push(populateList(firebase, idOrList, p, results)) : void 0 : void 0;\n    });\n  }), Promise.all(promisesArray).then(function () {\n    return results;\n  });\n}","map":null,"metadata":{},"sourceType":"script"}