{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.unWatchUserProfile = unWatchUserProfile, exports.handleProfileWatchResponse = handleProfileWatchResponse, exports.linkAndRetrieveDataWithCredential = linkAndRetrieveDataWithCredential, exports.linkWithPopup = linkWithPopup, exports.linkWithRedirect = linkWithRedirect, exports.signInWithPhoneNumber = signInWithPhoneNumber, exports.linkWithCredential = exports.reloadAuth = exports.updateEmail = exports.updateAuth = exports.updateProfile = exports.verifyPasswordResetCode = exports.confirmPasswordReset = exports.resetPassword = exports.createUser = exports.logout = exports.login = exports.init = exports.handleRedirectResult = exports.createUserProfile = exports.watchUserProfile = void 0;\n\nvar _pick2 = _interopRequireDefault(require(\"lodash/pick\")),\n    _omit2 = _interopRequireDefault(require(\"lodash/omit\")),\n    _forEach2 = _interopRequireDefault(require(\"lodash/forEach\")),\n    _constants = require(\"../constants\"),\n    _helpers = require(\"../helpers\"),\n    _utils = require(\"../utils\"),\n    _auth = require(\"../utils/auth\"),\n    _populate = require(\"../utils/populate\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || \"[object Arguments]\" === Object.prototype.toString.call(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var source, i = 1; i < arguments.length; i++) source = null == arguments[i] ? {} : arguments[i], i % 2 ? ownKeys(source, !0).forEach(function (key) {\n    _defineProperty(target, key, source[key]);\n  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(source).forEach(function (key) {\n    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n  });\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  return key in obj ? Object.defineProperty(obj, key, {\n    value: value,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : obj[key] = value, obj;\n}\n\nfunction dispatchLoginError(dispatch, authError) {\n  return dispatch({\n    type: _constants.actionTypes.LOGIN_ERROR,\n    authError: authError\n  });\n}\n\nfunction unWatchUserProfile(firebase) {\n  var _firebase$_ = firebase._,\n      authUid = _firebase$_.authUid,\n      _firebase$_$config = _firebase$_.config,\n      userProfile = _firebase$_$config.userProfile,\n      useFirestoreForProfile = _firebase$_$config.useFirestoreForProfile;\n  firebase._.profileWatch && (useFirestoreForProfile && firebase.firestore ? firebase._.profileWatch() : firebase.database().ref().child(\"\".concat(userProfile, \"/\").concat(authUid)).off(\"value\", firebase._.profileWatch), firebase._.profileWatch = null);\n}\n\nfunction getProfileFromSnap(snap) {\n  return snap && snap.val ? snap.val() : snap && snap.data && snap.exists ? snap.data() : null;\n}\n\nfunction handleProfileWatchResponse(dispatch, firebase, userProfileSnap, token) {\n  var _firebase$_$config2 = firebase._.config,\n      profileParamsToPopulate = _firebase$_$config2.profileParamsToPopulate,\n      autoPopulateProfile = _firebase$_$config2.autoPopulateProfile,\n      useFirestoreForProfile = _firebase$_$config2.useFirestoreForProfile,\n      logErrors = _firebase$_$config2.logErrors,\n      profile = getProfileFromSnap(userProfileSnap);\n  profileParamsToPopulate && !useFirestoreForProfile && (Array.isArray(profileParamsToPopulate) || (0, _utils.isString)(profileParamsToPopulate)) ? (0, _populate.promisesForPopulate)(firebase, userProfileSnap.key, profile, profileParamsToPopulate).then(function (data) {\n    if ((0, _forEach2.default)(data, function (result, path) {\n      dispatch({\n        type: _constants.actionTypes.SET,\n        path: path,\n        data: result,\n        timestamp: Date.now(),\n        requesting: !1,\n        requested: !0\n      });\n    }), !autoPopulateProfile) dispatch({\n      type: _constants.actionTypes.SET_PROFILE,\n      profile: token ? _objectSpread({}, profile, {\n        token: token\n      }) : profile\n    });else {\n      var populates = (0, _populate.getPopulateObjs)(profileParamsToPopulate),\n          _profile = userProfileSnap.val();\n\n      dispatch({\n        type: _constants.actionTypes.SET_PROFILE,\n        profile: (0, _helpers.populate)({\n          profile: token ? _objectSpread({}, _profile, {\n            token: token\n          }) : _profile,\n          data: data\n        }, \"profile\", populates)\n      });\n    }\n  }).catch(function (err) {\n    logErrors && console.error(\"RRF: Error retrieving data for profile population. Firebase:\", err), dispatch({\n      type: _constants.actionTypes.UNAUTHORIZED_ERROR,\n      authError: \"Error during profile population: \".concat(err.message)\n    }), dispatch({\n      type: _constants.actionTypes.SET_PROFILE,\n      profile: profile\n    });\n  }) : (useFirestoreForProfile && profileParamsToPopulate && console.warn(\"Profile population is not yet supported for Firestore\"), dispatch({\n    type: _constants.actionTypes.SET_PROFILE,\n    profile: token ? _objectSpread({}, profile, {\n      token: token\n    }) : profile\n  }));\n}\n\nfunction createProfileWatchErrorHandler(dispatch, firebase) {\n  var _firebase$_$config3 = firebase._.config,\n      onProfileListenerError = _firebase$_$config3.onProfileListenerError,\n      logErrors = _firebase$_$config3.logErrors;\n  return function (err) {\n    if (logErrors && console.error(\"Error with profile listener: \".concat(err.message || \"\"), err), \"function\" == typeof onProfileListenerError) {\n      var factoryResult = onProfileListenerError(err, firebase);\n      if (\"function\" == typeof factoryResult.then) return factoryResult;\n    }\n\n    return Promise.reject(err);\n  };\n}\n\nvar watchUserProfile = function (dispatch, firebase) {\n  var _firebase$_2 = firebase._,\n      authUid = _firebase$_2.authUid,\n      _firebase$_2$config = _firebase$_2.config,\n      userProfile = _firebase$_2$config.userProfile,\n      useFirestoreForProfile = _firebase$_2$config.useFirestoreForProfile,\n      enableClaims = _firebase$_2$config.enableClaims;\n  if (unWatchUserProfile(firebase), userProfile) if (useFirestoreForProfile && firebase.firestore) firebase._.profileWatch = firebase.firestore().collection(userProfile).doc(authUid).onSnapshot(function (userProfileSnap) {\n    return enableClaims ? firebase.auth().currentUser.getIdTokenResult(!0).then(function (token) {\n      return handleProfileWatchResponse(dispatch, firebase, userProfileSnap, token);\n    }) : handleProfileWatchResponse(dispatch, firebase, userProfileSnap, null);\n  }, createProfileWatchErrorHandler(dispatch, firebase));else if (firebase.database) firebase._.profileWatch = firebase.database().ref().child(\"\".concat(userProfile, \"/\").concat(authUid)).on(\"value\", function (userProfileSnap) {\n    enableClaims ? firebase.auth().currentUser.getIdTokenResult(!0).then(function (token) {\n      return handleProfileWatchResponse(dispatch, firebase, userProfileSnap, token);\n    }) : handleProfileWatchResponse(dispatch, firebase, userProfileSnap, null);\n  }, createProfileWatchErrorHandler(dispatch, firebase));else throw new Error(\"Real Time Database or Firestore must be included to enable user profile\");\n};\n\nexports.watchUserProfile = watchUserProfile;\n\nvar createUserProfile = function (dispatch, firebase, userData, profile) {\n  var config = firebase._.config;\n  if (!config.userProfile || !firebase.database && !firebase.firestore) return Promise.resolve(userData);\n  if (\"function\" == typeof config.profileFactory) try {\n    profile = config.profileFactory(userData, profile, firebase);\n  } catch (err) {\n    return console.error(\"Error occured within profileFactory function:\", err.message || err), Promise.reject(err);\n  }\n  return config.useFirestoreForProfile ? firebase.firestore().collection(config.userProfile).doc(userData.uid || userData.user.uid).get().then(function (profileSnap) {\n    if (!config.updateProfileOnLogin && profileSnap.exists) return profileSnap.data();\n    var newProfile = profile;\n\n    if (!newProfile) {\n      var userDataObject = userData.uid ? userData.toJSON ? userData.toJSON() : userData : userData.user.toJSON ? userData.user.toJSON() : userData.user;\n      newProfile = _objectSpread({}, (0, _omit2.default)(userDataObject, config.keysToRemoveFromAuth), {\n        avatarUrl: userDataObject.photoURL\n      });\n    }\n\n    return Array.isArray(newProfile.providerData) && (newProfile.providerData = newProfile.providerData.map(function (providerDataItem) {\n      return (0, _pick2.default)(providerDataItem, config.keysToPreserveFromProviderData);\n    })), profileSnap.ref.set(newProfile, {\n      merge: !0\n    }).then(function () {\n      return newProfile;\n    });\n  }).catch(function (err) {\n    return dispatch({\n      type: _constants.actionTypes.UNAUTHORIZED_ERROR,\n      authError: err\n    }), Promise.reject(err);\n  }) : firebase.database().ref().child(\"\".concat(config.userProfile, \"/\").concat(userData.user ? userData.user.uid : userData.uid)).once(\"value\").then(function (profileSnap) {\n    return config.updateProfileOnLogin || null === profileSnap.val() ? profileSnap.ref.update(profile).then(function () {\n      return profile;\n    }) : profileSnap.val();\n  }).catch(function (err) {\n    return dispatch({\n      type: _constants.actionTypes.UNAUTHORIZED_ERROR,\n      authError: err\n    }), \"function\" == typeof config.onProfileWriteError && config.onProfileWriteError(err, firebase), Promise.reject(err);\n  });\n};\n\nexports.createUserProfile = createUserProfile;\n\nvar handleAuthStateChange = function (dispatch, firebase, authData) {\n  var config = firebase._.config;\n  authData ? (firebase._.authUid = authData.uid, config.presence && (0, _auth.setupPresence)(dispatch, firebase), dispatch({\n    type: _constants.actionTypes.LOGIN,\n    auth: authData,\n    preserve: config.preserveOnLogin\n  }), watchUserProfile(dispatch, firebase), \"function\" == typeof config.onAuthStateChanged && config.onAuthStateChanged(authData, firebase, dispatch)) : (\"function\" == typeof config.onAuthStateChanged && firebase._.config.onAuthStateChanged(authData, firebase, dispatch), dispatch({\n    type: _constants.actionTypes.AUTH_EMPTY_CHANGE,\n    preserve: config.preserveOnEmptyAuthChange\n  }));\n},\n    handleRedirectResult = function (dispatch, firebase, authData) {\n  if (\"function\" == typeof firebase._.config.onRedirectResult && firebase._.config.onRedirectResult(authData, firebase, dispatch), authData && authData.user) {\n    var user = authData.user;\n    return firebase._.authUid = user.uid, watchUserProfile(dispatch, firebase), dispatch({\n      type: _constants.actionTypes.LOGIN,\n      auth: user,\n      preserve: firebase._.config.preserveOnLogin\n    }), createUserProfile(dispatch, firebase, user, {\n      email: user.email,\n      displayName: user.providerData[0].displayName || user.email,\n      avatarUrl: user.providerData[0].photoURL,\n      providerData: user.providerData\n    });\n  }\n};\n\nexports.handleRedirectResult = handleRedirectResult;\n\nvar init = function (dispatch, firebase) {\n  firebase.auth && (dispatch({\n    type: _constants.actionTypes.AUTHENTICATION_INIT_STARTED\n  }), firebase.auth().onAuthStateChanged(function (authData) {\n    return handleAuthStateChange(dispatch, firebase, authData);\n  }), firebase._.config.enableRedirectHandling && \"function\" == typeof firebase.auth().getRedirectResult && \"undefined\" != typeof window && window.location && window.location.protocol && -1 !== window.location.protocol.indexOf(\"http\") && firebase.auth().getRedirectResult().then(function (authData) {\n    return handleRedirectResult(dispatch, firebase, authData);\n  }).catch(function (error) {\n    return dispatchLoginError(dispatch, error), Promise.reject(error);\n  }), firebase.auth().currentUser, dispatch({\n    type: _constants.actionTypes.AUTHENTICATION_INIT_FINISHED\n  }));\n};\n\nexports.init = init;\n\nvar login = function (dispatch, firebase, credentials) {\n  var _firebase$auth;\n\n  firebase._.config.resetBeforeLogin && dispatchLoginError(dispatch, null);\n\n  var _getLoginMethodAndPar = (0, _auth.getLoginMethodAndParams)(firebase, credentials),\n      method = _getLoginMethodAndPar.method,\n      params = _getLoginMethodAndPar.params;\n\n  return (_firebase$auth = firebase.auth())[method].apply(_firebase$auth, _toConsumableArray(params)).then(function (userData) {\n    if (!userData) return Promise.resolve(null);\n    if ([\"signInWithEmailAndPassword\", \"signInAndRetrieveDataWithEmailAndPassword\"].includes(method)) return {\n      user: userData\n    };\n    if ([\"signInWithCustomToken\", \"signInAndRetrieveDataWithCustomToken\"].includes(method)) return firebase._.config.updateProfileOnLogin ? createUserProfile(dispatch, firebase, userData, credentials.profile) : {\n      user: userData\n    };\n    if (\"signInWithPhoneNumber\" === method) return _objectSpread({}, userData, {\n      confirm: function confirm(code) {\n        return userData.confirm(code).then(function (_ref) {\n          var user = _ref.user,\n              additionalUserInfo = _ref.additionalUserInfo;\n          return createUserProfile(dispatch, firebase, user, {\n            phoneNumber: user.providerData[0].phoneNumber,\n            providerData: user.providerData\n          }).then(function (profile) {\n            return {\n              profile: profile,\n              user: user,\n              additionalUserInfo: additionalUserInfo\n            };\n          });\n        });\n      }\n    });\n    var user = userData.user || userData;\n    return createUserProfile(dispatch, firebase, user, credentials.profile || {\n      email: user.email,\n      displayName: user.providerData[0].displayName || user.email,\n      avatarUrl: user.providerData[0].photoURL,\n      providerData: user.providerData\n    }).then(function (profile) {\n      return _objectSpread({\n        profile: profile\n      }, userData);\n    });\n  }).catch(function (err) {\n    return dispatchLoginError(dispatch, err), Promise.reject(err);\n  });\n};\n\nexports.login = login;\n\nvar logout = function (dispatch, firebase) {\n  return unWatchUserProfile(firebase), firebase.auth().signOut().then(function () {\n    var action = {\n      type: _constants.actionTypes.LOGOUT\n    };\n    return firebase._.config.preserveOnLogout && (action.preserve = firebase._.config.preserveOnLogout), dispatch(action), firebase._.authUid = null, firebase;\n  });\n};\n\nexports.logout = logout;\n\nvar createUser = function (dispatch, firebase, _ref2, profile) {\n  var email = _ref2.email,\n      password = _ref2.password;\n\n  if (dispatchLoginError(dispatch, null), !email || !password) {\n    var error = new Error(\"Email and Password are required to create user\");\n    return dispatchLoginError(dispatch, error), Promise.reject(error);\n  }\n\n  return firebase.auth().createUserWithEmailAndPassword(email, password).then(function (userData) {\n    return createUserProfile(dispatch, firebase, userData, profile || {\n      email: email\n    });\n  }).catch(function (err) {\n    return dispatchLoginError(dispatch, err), Promise.reject(err);\n  });\n};\n\nexports.createUser = createUser;\n\nvar resetPassword = function (dispatch, firebase, email) {\n  return dispatchLoginError(dispatch, null), firebase.auth().sendPasswordResetEmail(email).catch(function (err) {\n    if (err) {\n      switch (err.code) {\n        case \"auth/user-not-found\":\n          dispatchLoginError(dispatch, new Error(\"The specified user account does not exist.\"));\n          break;\n\n        default:\n          dispatchLoginError(dispatch, err);\n      }\n\n      return Promise.reject(err);\n    }\n  });\n};\n\nexports.resetPassword = resetPassword;\n\nvar confirmPasswordReset = function (dispatch, firebase, code, password) {\n  return dispatchLoginError(dispatch, null), firebase.auth().confirmPasswordReset(code, password).catch(function (err) {\n    if (err) {\n      switch (err.code) {\n        case \"auth/expired-action-code\":\n          dispatchLoginError(dispatch, new Error(\"The action code has expired.\"));\n          break;\n\n        case \"auth/invalid-action-code\":\n          dispatchLoginError(dispatch, new Error(\"The action code is invalid.\"));\n          break;\n\n        case \"auth/user-disabled\":\n          dispatchLoginError(dispatch, new Error(\"The user is disabled.\"));\n          break;\n\n        case \"auth/user-not-found\":\n          dispatchLoginError(dispatch, new Error(\"The user is not found.\"));\n          break;\n\n        case \"auth/weak-password\":\n          dispatchLoginError(dispatch, new Error(\"The password is not strong enough.\"));\n          break;\n\n        default:\n          dispatchLoginError(dispatch, err);\n      }\n\n      return Promise.reject(err);\n    }\n  });\n};\n\nexports.confirmPasswordReset = confirmPasswordReset;\n\nvar verifyPasswordResetCode = function (dispatch, firebase, code) {\n  return dispatchLoginError(dispatch, null), firebase.auth().verifyPasswordResetCode(code).catch(function (err) {\n    return err && dispatchLoginError(dispatch, err), Promise.reject(err);\n  });\n};\n\nexports.verifyPasswordResetCode = verifyPasswordResetCode;\n\nvar updateProfile = function (dispatch, firebase, profileUpdate, options) {\n  var config = firebase._.config;\n  dispatch({\n    type: _constants.actionTypes.PROFILE_UPDATE_START,\n    payload: profileUpdate\n  });\n  var updatePromise = config.useFirestoreForProfile ? _auth.updateProfileOnFirestore : _auth.updateProfileOnRTDB;\n  return updatePromise(firebase, profileUpdate, options).then(function (snap) {\n    return dispatch({\n      type: _constants.actionTypes.PROFILE_UPDATE_SUCCESS,\n      payload: config.useFirestoreForProfile ? snap.data() : snap.val()\n    }), snap;\n  }).catch(function (error) {\n    return dispatch({\n      type: _constants.actionTypes.PROFILE_UPDATE_ERROR,\n      error: error\n    }), Promise.reject(error);\n  });\n};\n\nexports.updateProfile = updateProfile;\n\nvar updateAuth = function (dispatch, firebase, authUpdate, updateInProfile) {\n  if (dispatch({\n    type: _constants.actionTypes.AUTH_UPDATE_START,\n    payload: authUpdate\n  }), !firebase.auth().currentUser) {\n    var error = new Error(\"User must be logged in to update auth.\");\n    return dispatch({\n      type: _constants.actionTypes.AUTH_UPDATE_ERROR,\n      payload: error\n    }), Promise.reject(error);\n  }\n\n  return firebase.auth().currentUser.updateProfile(authUpdate).then(function (payload) {\n    return dispatch({\n      type: _constants.actionTypes.AUTH_UPDATE_SUCCESS,\n      auth: firebase.auth().currentUser\n    }), updateInProfile ? updateProfile(dispatch, firebase, authUpdate) : payload;\n  }).catch(function (error) {\n    return dispatch({\n      type: _constants.actionTypes.AUTH_UPDATE_ERROR,\n      error: error\n    }), Promise.reject(error);\n  });\n};\n\nexports.updateAuth = updateAuth;\n\nvar updateEmail = function (dispatch, firebase, newEmail, updateInProfile) {\n  if (dispatch({\n    type: _constants.actionTypes.EMAIL_UPDATE_START,\n    payload: newEmail\n  }), !firebase.auth().currentUser) {\n    var error = new Error(\"User must be logged in to update email.\");\n    return dispatch({\n      type: _constants.actionTypes.EMAIL_UPDATE_ERROR,\n      error: error\n    }), Promise.reject(error);\n  }\n\n  return firebase.auth().currentUser.updateEmail(newEmail).then(function (payload) {\n    return dispatch({\n      type: _constants.actionTypes.EMAIL_UPDATE_SUCCESS,\n      payload: newEmail\n    }), updateInProfile ? updateProfile(dispatch, firebase, {\n      email: newEmail\n    }) : payload;\n  }).catch(function (error) {\n    return dispatch({\n      type: _constants.actionTypes.EMAIL_UPDATE_ERROR,\n      error: error\n    }), Promise.reject(error);\n  });\n};\n\nexports.updateEmail = updateEmail;\n\nvar reloadAuth = function (dispatch, firebase) {\n  if (dispatch({\n    type: _constants.actionTypes.AUTH_RELOAD_START\n  }), !firebase.auth().currentUser) {\n    var error = new Error(\"User must be logged in to reload auth.\");\n    return dispatch({\n      type: _constants.actionTypes.AUTH_RELOAD_ERROR,\n      error: error\n    }), Promise.reject(error);\n  }\n\n  return firebase.auth().currentUser.reload().then(function () {\n    var auth = firebase.auth().currentUser;\n    return dispatch({\n      type: _constants.actionTypes.AUTH_RELOAD_SUCCESS,\n      payload: auth\n    }), auth;\n  }).catch(function (error) {\n    return dispatch({\n      type: _constants.actionTypes.AUTH_RELOAD_ERROR,\n      error: error\n    }), Promise.reject(error);\n  });\n};\n\nexports.reloadAuth = reloadAuth;\n\nvar linkWithCredential = function (dispatch, firebase, credential) {\n  if (dispatch({\n    type: _constants.actionTypes.AUTH_LINK_START\n  }), !firebase.auth().currentUser) {\n    var error = new Error(\"User must be logged in to link with credential.\");\n    return dispatch({\n      type: _constants.actionTypes.AUTH_LINK_ERROR,\n      error: error\n    }), Promise.reject(error);\n  }\n\n  return firebase.auth().currentUser.linkWithCredential(credential).then(function (auth) {\n    return dispatch({\n      type: _constants.actionTypes.AUTH_LINK_SUCCESS,\n      payload: auth\n    }), auth;\n  }).catch(function (error) {\n    return dispatch({\n      type: _constants.actionTypes.AUTH_LINK_ERROR,\n      error: error\n    }), Promise.reject(error);\n  });\n};\n\nexports.linkWithCredential = linkWithCredential;\n\nfunction linkWithAuthDispatch(promiseFunc, args, dispatch, firebase) {\n  if (dispatch({\n    type: _constants.actionTypes.AUTH_LINK_START\n  }), !firebase.auth().currentUser) {\n    var error = new Error(\"User must be logged in to link with credential.\");\n    return dispatch({\n      type: _constants.actionTypes.AUTH_LINK_ERROR,\n      error: error\n    }), Promise.reject(error);\n  }\n\n  return promiseFunc.apply(void 0, _toConsumableArray(args)).then(function (auth) {\n    return dispatch({\n      type: _constants.actionTypes.AUTH_LINK_SUCCESS,\n      payload: auth\n    }), auth;\n  }).catch(function (error) {\n    return dispatch({\n      type: _constants.actionTypes.AUTH_LINK_ERROR,\n      error: error\n    }), Promise.reject(error);\n  });\n}\n\nfunction linkAndRetrieveDataWithCredential(dispatch, firebase, credential) {\n  return linkWithAuthDispatch(firebase.auth().currentUser.linkAndRetrieveDataWithCredential, [credential], dispatch, firebase);\n}\n\nfunction linkWithPopup(dispatch, firebase, credential) {\n  return linkWithAuthDispatch(firebase.auth().currentUser.linkWithPopup, [credential], dispatch, firebase);\n}\n\nfunction linkWithRedirect(dispatch, firebase, provider) {\n  return linkWithAuthDispatch(firebase.auth().currentUser.linkWithRedirect, [provider], dispatch, firebase);\n}\n\nfunction signInWithPhoneNumber(firebase, dispatch, phoneNumber, applicationVerifier) {\n  var options = 4 < arguments.length && arguments[4] !== void 0 ? arguments[4] : {};\n  return login(dispatch, firebase, _objectSpread({\n    phoneNumber: phoneNumber,\n    applicationVerifier: applicationVerifier\n  }, options));\n}","map":null,"metadata":{},"sourceType":"script"}