{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.deleteFile = deleteFile, exports.writeMetadataToDb = writeMetadataToDb, exports.uploadFileWithProgress = uploadFileWithProgress;\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\")),\n    _omitBy2 = _interopRequireDefault(require(\"lodash/omitBy\")),\n    _constants = require(\"../constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar FILE_UPLOAD_ERROR = _constants.actionTypes.FILE_UPLOAD_ERROR,\n    FILE_UPLOAD_PROGRESS = _constants.actionTypes.FILE_UPLOAD_PROGRESS;\n\nfunction deleteFile(firebase, _ref) {\n  var path = _ref.path,\n      dbPath = _ref.dbPath;\n  return firebase.storage().ref(path).delete().then(function () {\n    if (!dbPath || !firebase.database && !firebase.firestore) return {\n      path: path\n    };\n    return function metaDeletePromise() {\n      return firebase._.config.useFirestoreForStorageMeta ? firebase.firestore().doc(dbPath).delete() : firebase.database().ref(dbPath).remove();\n    }().then(function () {\n      return {\n        path: path,\n        dbPath: dbPath\n      };\n    });\n  });\n}\n\nfunction createUploadMetaResponseHandler(_ref2) {\n  var fileData = _ref2.fileData,\n      firebase = _ref2.firebase,\n      uploadTaskSnapshot = _ref2.uploadTaskSnapshot,\n      downloadURL = _ref2.downloadURL;\n  return function (metaDataSnapshot) {\n    var useFirestoreForStorageMeta = firebase._.config.useFirestoreForStorageMeta,\n        result = {\n      snapshot: metaDataSnapshot,\n      key: metaDataSnapshot.key || metaDataSnapshot.id,\n      File: fileData,\n      metaDataSnapshot: metaDataSnapshot,\n      uploadTaskSnapshot: uploadTaskSnapshot,\n      uploadTaskSnaphot: uploadTaskSnapshot,\n      createdAt: useFirestoreForStorageMeta ? firebase.firestore.FieldValue.serverTimestamp() : firebase.database.ServerValue.TIMESTAMP\n    };\n    return metaDataSnapshot.id && (result.id = metaDataSnapshot.id), downloadURL && (result.downloadURL = downloadURL), result;\n  };\n}\n\nfunction getDownloadURLFromUploadTaskSnapshot(uploadTaskSnapshot) {\n  return uploadTaskSnapshot.ref && \"function\" == typeof uploadTaskSnapshot.ref.getDownloadURL ? uploadTaskSnapshot.ref.getDownloadURL() : Promise.resolve(uploadTaskSnapshot.downloadURLs && uploadTaskSnapshot.downloadURLs[0]);\n}\n\nfunction writeMetadataToDb(_ref3) {\n  var firebase = _ref3.firebase,\n      uploadTaskSnapshot = _ref3.uploadTaskSnapshot,\n      dbPath = _ref3.dbPath,\n      options = _ref3.options,\n      _firebase$_$config = firebase._.config,\n      fileMetadataFactory = _firebase$_$config.fileMetadataFactory,\n      useFirestoreForStorageMeta = _firebase$_$config.useFirestoreForStorageMeta,\n      metadataFactory = options.metadataFactory,\n      metaFactoryFunction = metadataFactory || fileMetadataFactory;\n  return getDownloadURLFromUploadTaskSnapshot(uploadTaskSnapshot).then(function (downloadURL) {\n    var fileData = \"function\" == typeof metaFactoryFunction ? metaFactoryFunction(uploadTaskSnapshot, firebase, uploadTaskSnapshot.metadata, downloadURL) : (0, _omitBy2.default)(uploadTaskSnapshot.metadata, _isUndefined2.default),\n        resultFromSnap = createUploadMetaResponseHandler({\n      fileData: fileData,\n      firebase: firebase,\n      uploadTaskSnapshot: uploadTaskSnapshot,\n      downloadURL: downloadURL\n    });\n    return function metaSetPromise(fileData) {\n      if (useFirestoreForStorageMeta) return firebase.firestore().collection(dbPath).add(fileData);\n      var newMetaRef = firebase.database().ref(dbPath).push();\n      return newMetaRef.set(fileData).then(function () {\n        return newMetaRef;\n      });\n    }(fileData).then(resultFromSnap);\n  });\n}\n\nfunction uploadFileWithProgress(dispatch, firebase, _ref4) {\n  var path = _ref4.path,\n      file = _ref4.file,\n      filename = _ref4.filename,\n      meta = _ref4.meta,\n      fileMetadata = _ref4.fileMetadata,\n      uploadEvent = firebase.storage().ref(\"\".concat(path, \"/\").concat(filename)).put(file, fileMetadata),\n      unListen = uploadEvent.on(firebase.storage.TaskEvent.STATE_CHANGED, {\n    next: function next(snapshot) {\n      dispatch({\n        type: FILE_UPLOAD_PROGRESS,\n        meta: meta,\n        payload: {\n          snapshot: snapshot,\n          percent: Math.floor(100 * (snapshot.bytesTransferred / snapshot.totalBytes))\n        }\n      });\n    },\n    error: function error(err) {\n      dispatch({\n        type: FILE_UPLOAD_ERROR,\n        meta: meta,\n        payload: err\n      }), unListen();\n    },\n    complete: function complete() {\n      unListen();\n    }\n  });\n  return uploadEvent;\n}","map":null,"metadata":{},"sourceType":"script"}