{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.watchEvent = watchEvent, exports.unWatchEvent = unWatchEvent, exports.watchEvents = watchEvents, exports.unWatchEvents = unWatchEvents, exports.remove = remove;\n\nvar _constants = require(\"../constants\"),\n    _query = require(\"../utils/query\");\n\nfunction watchEvent(firebase, dispatch, options) {\n  if (!firebase.database || \"function\" != typeof firebase.database) throw new Error(\"Firebase database is required to create watchers\");\n  var type = options.type,\n      path = options.path,\n      populates = options.populates,\n      queryParams = options.queryParams,\n      queryId = options.queryId,\n      isQuery = options.isQuery,\n      storeAs = options.storeAs,\n      logErrors = firebase._.config.logErrors,\n      watchPath = storeAs ? \"\".concat(path, \"@\").concat(storeAs) : path,\n      id = queryId || (0, _query.getQueryIdFromPath)(path),\n      counter = (0, _query.getWatcherCount)(firebase, type, watchPath, id);\n  if (0 < counter && id && (0, _query.unsetWatcher)(firebase, dispatch, type, path, id), (0, _query.setWatcher)(firebase, dispatch, type, watchPath, id), \"first_child\" === type) return firebase.database().ref().child(path).orderByKey().limitToFirst(1).once(\"value\").then(function (snapshot) {\n    return null === snapshot.val() && dispatch({\n      type: _constants.actionTypes.NO_VALUE,\n      path: storeAs || path\n    }), snapshot;\n  }).catch(function (err) {\n    return dispatch({\n      type: _constants.actionTypes.ERROR,\n      path: storeAs || path,\n      payload: err\n    }), Promise.reject(err);\n  });\n  var query = firebase.database().ref().child(path);\n  return isQuery && (query = (0, _query.applyParamsToQuery)(queryParams, query)), dispatch({\n    type: _constants.actionTypes.START,\n    path: storeAs || path\n  }), \"once\" === type ? query.once(\"value\").then(function (snapshot) {\n    return null === snapshot.val() ? dispatch({\n      type: _constants.actionTypes.NO_VALUE,\n      path: storeAs || path\n    }) : populates ? (0, _query.populateAndDispatch)(firebase, dispatch, {\n      path: path,\n      storeAs: storeAs,\n      snapshot: snapshot,\n      data: snapshot.val(),\n      populates: populates\n    }) : dispatch({\n      type: _constants.actionTypes.SET,\n      path: storeAs || path,\n      data: snapshot.val(),\n      ordered: (0, _query.orderedFromSnapshot)(snapshot)\n    });\n  }).catch(function (err) {\n    return dispatch({\n      type: _constants.actionTypes.UNAUTHORIZED_ERROR,\n      payload: err\n    }), Promise.reject(err);\n  }) : void query.on(type, function (snapshot) {\n    var data = \"child_removed\" === type ? void 0 : snapshot.val(),\n        resultPath = storeAs || \"value\" === type ? path : \"\".concat(path, \"/\").concat(snapshot.key);\n\n    if (!populates) {\n      var ordered = \"child_added\" === type ? [{\n        key: snapshot.key,\n        value: snapshot.val()\n      }] : (0, _query.orderedFromSnapshot)(snapshot);\n      return dispatch({\n        type: _constants.actionTypes.SET,\n        path: storeAs || resultPath,\n        data: data,\n        ordered: ordered\n      });\n    }\n\n    return (0, _query.populateAndDispatch)(firebase, dispatch, {\n      path: path,\n      storeAs: storeAs,\n      snapshot: snapshot,\n      data: snapshot.val(),\n      populates: populates\n    });\n  }, function (err) {\n    logErrors && console.log(\"Error retrieving data for path: \".concat(path, \", storeAs: \").concat(storeAs, \". Firebase:\"), err), dispatch({\n      type: _constants.actionTypes.ERROR,\n      storeAs: storeAs,\n      path: path,\n      payload: err\n    });\n  });\n}\n\nfunction unWatchEvent(firebase, dispatch, _ref) {\n  var type = _ref.type,\n      path = _ref.path,\n      storeAs = _ref.storeAs,\n      queryId = _ref.queryId,\n      watchPath = storeAs ? \"\".concat(path, \"@\").concat(storeAs) : path;\n  (0, _query.unsetWatcher)(firebase, dispatch, type, watchPath, queryId);\n}\n\nfunction watchEvents(firebase, dispatch, events) {\n  if (!Array.isArray(events)) throw new Error(\"Events config must be an Array\");\n  return events.map(function (event) {\n    return watchEvent(firebase, dispatch, event);\n  });\n}\n\nfunction unWatchEvents(firebase, dispatch, events) {\n  events.forEach(function (event) {\n    return unWatchEvent(firebase, dispatch, event);\n  });\n}\n\nfunction remove(firebase, dispatch, path) {\n  var options = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : {},\n      _options$dispatchActi = options.dispatchAction,\n      dispatchRemoveAction = firebase._.config.dispatchRemoveAction;\n  return firebase.database().ref(path).remove().then(function () {\n    return dispatchRemoveAction && (!(void 0 !== _options$dispatchActi) || _options$dispatchActi) && dispatch({\n      type: _constants.actionTypes.REMOVE,\n      path: path\n    }), path;\n  }).catch(function (err) {\n    return dispatch({\n      type: _constants.actionTypes.ERROR,\n      payload: err\n    }), Promise.reject(err);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}